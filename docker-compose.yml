version: '3'

networks:
  web:
    external: true
  internal:
    external: false

services:
  traefik:
    container_name: traefik
    image: traefik:v2.5
    restart: always
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      #- --api.insecure=true
      - --api.dashboard=true
      #- --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host({{ index .Labels "com.docker.compose.service" }}.$DOMAIN_NAME)
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-oauth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAIN_NAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAIN_NAME
      - --providers.docker.network=web
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      #- --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    ports:
      - 80:80
      - 443:443
      #- 8081:8080
    volumes:
      - "$PWD/traefik2/rules:/rules"
      - "$PWD/acme.json:/acme.json"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - $PWD/traefik2/traefik.log:/traefik.log
      - $PWD/shared:/shared
    networks:
      - web
      - internal
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      ## HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      ## HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAIN_NAME`)"
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"     

  shorter:
    build: .
    container_name: shorter
    env_file:
      - .env
    command: bash -c 'while !</dev/tcp/postgres/5432; do sleep 1; done; gunicorn --bind 0.0.0.0:8000 config.wsgi'
    volumes:
      - .:/home/user/web
    restart: always
    ports:
      - '8000:8000'
    expose:
      - 8010
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.django-rtr.entrypoints=https"
      - "traefik.http.routers.django-rtr.rule=Host(`$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.django-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.django-rtr.service=django-svc"
      - "traefik.http.services.django-svc.loadbalancer.server.port=8000"
      ## Disable from watchtower
      - "com.centurylinklabs.watchtower.enable=false"
    networks:
      - web
      - internal

  postgres:
    image: postgres:13
    container_name: postgres
    env_file:
      - .env
    volumes:
      - /storage/docker/volumes/postgres/data/db:/var/lib/postgresql/data
    restart: always
    ports:
      - "5432:5432"
    expose:
      - 5432
    environment:
      - "POSTGRES_DB=${DATABASES_NAME}"
      - "POSTGRES_USER=${DATABASES_USER}"
      - "POSTGRES_PASSWORD=${DATABASES_PASSWORD}"
    networks:
      - internal
      - web

  nginx:
    image: nginx:1.15-alpine
    container_name: nginx
    env_file:
      - .env
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./config/static:/static
      - ./config/media:/media
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.static-http.entrypoints=https"      
      - "traefik.http.routers.static-http.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/static`,`/media`)"
    networks:
      - web
      - internal
    depends_on:
      - shorter
